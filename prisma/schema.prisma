generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id
  github_id     Int?       @unique
  google_id     String?    @unique
  name          String?
  username      String?    @unique
  email         String     @unique
  image         String?
  password      String?
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  documents     Document[]
  rooms         Room[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id])

  @@map("session")
}

model Room {
  id        String     @id
  name      String
  owner     String
  content   String?
  createdAt DateTime   @default(now())
  ownerId   String
  updatedAt DateTime   @updatedAt
  users     String[]
  documents Document[]
  user      User       @relation(fields: [ownerId], references: [id])
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String?  @db.Text
  roomId    String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shared    Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password             String?
  createdAt            DateTime
  updatedAt            DateTime
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
