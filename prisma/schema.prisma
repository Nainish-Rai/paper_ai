generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id
  github_id     Int?       @unique
  google_id     String?    @unique
  name          String?
  username      String?    @unique
  email         String     @unique
  image         String?
  password      String?
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  documents     Document[]
  accounts      Account[]
  sessions      Session[]
  templates     Template[] // Added relation to templates

  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id])

  @@map("session")
}

model Document {
  id         String    @id @default(cuid())
  title      String
  content    String?   @db.Text
  authorId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  shared     Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
}

model Template {
  id          String     @id @default(cuid())
  name        String
  description String?
  content     String     @db.Text
  version     Int        @default(1)
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  categories  String[]   // Array of category tags
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([authorId])
  @@map("template")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password             String?
  createdAt            DateTime
  updatedAt            DateTime
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
